package com.cashi.collectionmanagement.domain.model.aggregates;

import com.cashi.collectionmanagement.domain.model.valueobjects.ContactResult;
import com.cashi.collectionmanagement.domain.model.valueobjects.ManagementType;
import com.cashi.shared.domain.AggregateRoot;
import com.cashi.shared.domain.model.entities.Campaign;
import com.cashi.shared.domain.model.entities.Portfolio;
import com.cashi.shared.domain.model.entities.Tenant;
import jakarta.persistence.*;
import lombok.Getter;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Entity
@Table(name = "gestiones", indexes = {
    @Index(name = "idx_gest_inquilino", columnList = "id_inquilino"),
    @Index(name = "idx_gest_cartera", columnList = "id_cartera"),
    @Index(name = "idx_gest_campana", columnList = "id_campana"),
    @Index(name = "idx_gest_cliente", columnList = "id_cliente"),
    @Index(name = "idx_gest_asesor", columnList = "id_asesor"),
    @Index(name = "idx_gest_fecha", columnList = "fecha_gestion")
})
@Getter
@NoArgsConstructor
public class Management extends AggregateRoot {

    // NOTE: id field is inherited from AggregateRoot (Long id with IDENTITY generation)
    // No need for embedded ManagementId since we use database auto-increment

    // Multi-tenant fields (nullable for backward compatibility)
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_inquilino")
    private Tenant tenant;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_cartera")
    private Portfolio portfolio;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_campana")
    private Campaign campaign;

    @Column(name = "id_cliente")
    private String customerId;

    @Column(name = "id_asesor")
    private String advisorId;

    // @Column(name = "id_campana_legacy")  // ELIMINADO: Ya no se usa, usar campaign entity
    // private String campaignId;

    @Column(name = "fecha_gestion")
    private LocalDateTime managementDate;

    // CATEGORÍA: Grupo al que pertenece la tipificación
    @Column(name = "codigo_categoria", length = 50)
    private String categoryCode;

    @Column(name = "descripcion_categoria", length = 255)
    private String categoryDescription;

    // TIPIFICACIÓN: Código específico/hoja (último nivel en jerarquía)
    @Column(name = "codigo_tipificacion", length = 50)
    private String typificationCode;

    @Column(name = "descripcion_tipificacion", length = 255)
    private String typificationDescription;

    @Column(name = "tipificacion_requiere_pago")
    private Boolean typificationRequiresPayment;

    @Column(name = "tipificacion_requiere_cronograma")
    private Boolean typificationRequiresSchedule;

    @Column(name = "observaciones", length = 2000)
    private String observations;

    // COMENTADO: Campos dinámicos deshabilitados temporalmente
    // @Column(name = "campos_dinamicos_json", columnDefinition = "JSON")
    // private String dynamicFieldsJson;

    // Normalized typifications (supports N levels)
    @OneToMany(mappedBy = "management", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private List<com.cashi.collectionmanagement.domain.model.entities.ManagementTypification> typifications = new ArrayList<>();

    // Legacy constructor (backward compatibility) - COMENTADO: campaignId eliminado
    // public Management(String customerId, String advisorId, String campaignId) {
    //     this.managementId = ManagementId.generate();
    //     this.customerId = customerId;
    //     this.advisorId = advisorId;
    //     this.campaignId = campaignId;
    //     this.managementDate = LocalDateTime.now();
    // }

    // Multi-tenant constructor
    public Management(Tenant tenant, Portfolio portfolio, Campaign campaign,
                     String customerId, String advisorId) {
        // id will be auto-generated by database (IDENTITY strategy from AggregateRoot)
        this.tenant = tenant;
        this.portfolio = portfolio;
        this.campaign = campaign;
        this.customerId = customerId;
        this.advisorId = advisorId;
        this.managementDate = LocalDateTime.now();
    }

    // Multi-tenant constructor (tenant only)
    public Management(Tenant tenant, String customerId, String advisorId) {
        // id will be auto-generated by database (IDENTITY strategy from AggregateRoot)
        this.tenant = tenant;
        this.customerId = customerId;
        this.advisorId = advisorId;
        this.managementDate = LocalDateTime.now();
    }

    // Classification management (normalized)
    public void addClassification(com.cashi.collectionmanagement.domain.model.entities.ManagementTypification typification) {
        typifications.add(typification);
        typification.setManagement(this);
    }

    public void removeClassification(com.cashi.collectionmanagement.domain.model.entities.ManagementTypification typification) {
        typifications.remove(typification);
        typification.setManagement(null);
    }

    public void clearClassifications() {
        typifications.clear();
    }

    public void setObservations(String observations) {
        this.observations = observations;
    }

    // COMENTADO: Campos dinámicos deshabilitados temporalmente
    // public void setDynamicFieldsJson(String dynamicFieldsJson) {
    //     this.dynamicFieldsJson = dynamicFieldsJson;
    // }

    // New setters for Category and Typification
    public void setCategory(String code, String description) {
        this.categoryCode = code;
        this.categoryDescription = description;
    }

    public void setTypification(String code, String description, Boolean requiresPayment, Boolean requiresSchedule) {
        this.typificationCode = code;
        this.typificationDescription = description;
        this.typificationRequiresPayment = requiresPayment;
        this.typificationRequiresSchedule = requiresSchedule;
    }

}
