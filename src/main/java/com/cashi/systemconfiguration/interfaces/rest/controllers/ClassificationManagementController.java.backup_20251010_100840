package com.cashi.systemconfiguration.interfaces.rest.controllers;

import com.cashi.systemconfiguration.application.internal.commandservices.ClassificationCommandServiceImpl;
import com.cashi.systemconfiguration.application.internal.queryservices.ClassificationQueryServiceImpl;
import com.cashi.systemconfiguration.domain.model.entities.ClassificationCatalog;
import com.cashi.systemconfiguration.domain.model.entities.ClassificationConfigHistory;
import com.cashi.systemconfiguration.domain.model.entities.ConfigurationVersion;
import com.cashi.systemconfiguration.domain.model.entities.TenantClassificationConfig;
import com.cashi.systemconfiguration.interfaces.rest.resources.*;
import com.cashi.systemconfiguration.interfaces.rest.transform.ClassificationResourceAssembler;
import jakarta.validation.Valid;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/v1")
@CrossOrigin(origins = "*")
public class ClassificationManagementController {

    private final ClassificationCommandServiceImpl commandService;
    private final ClassificationQueryServiceImpl queryService;

    public ClassificationManagementController(
            ClassificationCommandServiceImpl commandService,
            ClassificationQueryServiceImpl queryService) {
        this.commandService = commandService;
        this.queryService = queryService;
    }

    // ========================================
    // CATALOG MANAGEMENT (System-wide)
    // ========================================

    @GetMapping("/classifications")
    public ResponseEntity<List<ClassificationCatalogResource>> getAllClassifications() {
        List<ClassificationCatalog> classifications = queryService.getAllActiveClassifications();
        List<ClassificationCatalogResource> resources = classifications.stream()
            .map(ClassificationResourceAssembler::toResourceFromEntity)
            .collect(Collectors.toList());
        return ResponseEntity.ok(resources);
    }

    @GetMapping("/classifications/type/{type}")
    public ResponseEntity<List<ClassificationCatalogResource>> getClassificationsByType(
            @PathVariable String type) {
        ClassificationCatalog.ClassificationType classificationType =
            ClassificationCatalog.ClassificationType.valueOf(type);
        List<ClassificationCatalog> classifications = queryService.getClassificationsByType(classificationType);
        List<ClassificationCatalogResource> resources = classifications.stream()
            .map(ClassificationResourceAssembler::toResourceFromEntity)
            .collect(Collectors.toList());
        return ResponseEntity.ok(resources);
    }

    @GetMapping("/classifications/type/{type}/root")
    public ResponseEntity<List<ClassificationCatalogResource>> getRootClassifications(
            @PathVariable String type) {
        ClassificationCatalog.ClassificationType classificationType =
            ClassificationCatalog.ClassificationType.valueOf(type);
        List<ClassificationCatalog> classifications = queryService.getRootClassificationsByType(classificationType);
        List<ClassificationCatalogResource> resources = classifications.stream()
            .map(ClassificationResourceAssembler::toResourceFromEntity)
            .collect(Collectors.toList());
        return ResponseEntity.ok(resources);
    }

    @GetMapping("/classifications/{parentId}/children")
    public ResponseEntity<List<ClassificationCatalogResource>> getChildClassifications(
            @PathVariable Long parentId) {
        List<ClassificationCatalog> classifications = queryService.getChildClassifications(parentId);
        List<ClassificationCatalogResource> resources = classifications.stream()
            .map(ClassificationResourceAssembler::toResourceFromEntity)
            .collect(Collectors.toList());
        return ResponseEntity.ok(resources);
    }

    @GetMapping("/classifications/{id}")
    public ResponseEntity<ClassificationCatalogResource> getClassificationById(@PathVariable Long id) {
        return queryService.getClassificationById(id)
            .map(ClassificationResourceAssembler::toResourceFromEntity)
            .map(ResponseEntity::ok)
            .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping("/classifications")
    public ResponseEntity<ClassificationCatalogResource> createClassification(
            @Valid @RequestBody CreateClassificationCommand command,
            @RequestHeader(value = "X-User-Id", defaultValue = "system") String userId) {
        ClassificationCatalog.ClassificationType type =
            ClassificationCatalog.ClassificationType.valueOf(command.classificationType());

        ClassificationCatalog created = commandService.createClassification(
            command.code(),
            command.name(),
            type,
            command.parentClassificationId(),
            userId
        );

        return ResponseEntity.status(HttpStatus.CREATED)
            .body(ClassificationResourceAssembler.toResourceFromEntity(created));
    }

    @DeleteMapping("/classifications/{id}")
    public ResponseEntity<Void> deleteClassification(
            @PathVariable Long id,
            @RequestHeader(value = "X-User-Id", defaultValue = "system") String userId) {
        commandService.deleteClassification(id, userId);
        return ResponseEntity.noContent().build();
    }

    @PatchMapping("/classifications/display-order")
    public ResponseEntity<Void> updateDisplayOrder(
            @RequestBody List<DisplayOrderUpdateCommand> updates,
            @RequestHeader(value = "X-User-Id", defaultValue = "system") String userId) {
        commandService.updateDisplayOrder(updates, userId);
        return ResponseEntity.ok().build();
    }

    // ========================================
    // TENANT/PORTFOLIO CONFIGURATION
    // ========================================

    @GetMapping("/tenants/{tenantId}/classifications")
    public ResponseEntity<List<TenantClassificationConfigResource>> getTenantClassifications(
            @PathVariable Long tenantId,
            @RequestParam(required = false) Long portfolioId) {
        List<TenantClassificationConfig> configs =
            queryService.getEnabledClassifications(tenantId, portfolioId);
        List<TenantClassificationConfigResource> resources = configs.stream()
            .map(ClassificationResourceAssembler::toResourceFromConfig)
            .collect(Collectors.toList());
        return ResponseEntity.ok(resources);
    }

    @GetMapping("/tenants/{tenantId}/classifications/type/{type}")
    public ResponseEntity<List<TenantClassificationConfigResource>> getTenantClassificationsByType(
            @PathVariable Long tenantId,
            @RequestParam(required = false) Long portfolioId,
            @PathVariable String type) {
        ClassificationCatalog.ClassificationType classificationType =
            ClassificationCatalog.ClassificationType.valueOf(type);

        List<TenantClassificationConfig> configs =
            queryService.getEnabledClassificationsByType(tenantId, portfolioId, classificationType);
        List<TenantClassificationConfigResource> resources = configs.stream()
            .map(ClassificationResourceAssembler::toResourceFromConfig)
            .collect(Collectors.toList());
        return ResponseEntity.ok(resources);
    }

    @GetMapping("/tenants/{tenantId}/classifications/level/{level}")
    public ResponseEntity<List<TenantClassificationConfigResource>> getTenantClassificationsByLevel(
            @PathVariable Long tenantId,
            @RequestParam(required = false) Long portfolioId,
            @PathVariable Integer level) {
        List<TenantClassificationConfig> configs =
            queryService.getEnabledClassificationsByLevel(tenantId, portfolioId, level);
        List<TenantClassificationConfigResource> resources = configs.stream()
            .map(ClassificationResourceAssembler::toResourceFromConfig)
            .collect(Collectors.toList());
        return ResponseEntity.ok(resources);
    }

    @GetMapping("/tenants/{tenantId}/classifications/{parentId}/children")
    public ResponseEntity<List<TenantClassificationConfigResource>> getTenantChildClassifications(
            @PathVariable Long tenantId,
            @RequestParam(required = false) Long portfolioId,
            @PathVariable Long parentId) {
        List<TenantClassificationConfig> configs =
            queryService.getChildClassificationsByParent(tenantId, portfolioId, parentId);
        List<TenantClassificationConfigResource> resources = configs.stream()
            .map(ClassificationResourceAssembler::toResourceFromConfig)
            .collect(Collectors.toList());
        return ResponseEntity.ok(resources);
    }

    @PostMapping("/tenants/{tenantId}/classifications/{classificationId}/enable")
    public ResponseEntity<TenantClassificationConfigResource> enableClassification(
            @PathVariable Long tenantId,
            @RequestParam(required = false) Long portfolioId,
            @PathVariable Long classificationId,
            @RequestHeader(value = "X-User-Id", defaultValue = "system") String userId) {
        TenantClassificationConfig config = commandService.enableClassification(
            tenantId, portfolioId, classificationId, userId
        );
        return ResponseEntity.ok(ClassificationResourceAssembler.toResourceFromConfig(config));
    }

    @PostMapping("/tenants/{tenantId}/classifications/{classificationId}/disable")
    public ResponseEntity<TenantClassificationConfigResource> disableClassification(
            @PathVariable Long tenantId,
            @RequestParam(required = false) Long portfolioId,
            @PathVariable Long classificationId,
            @RequestHeader(value = "X-User-Id", defaultValue = "system") String userId) {
        TenantClassificationConfig config = commandService.disableClassification(
            tenantId, portfolioId, classificationId, userId
        );
        return ResponseEntity.ok(ClassificationResourceAssembler.toResourceFromConfig(config));
    }

    @PutMapping("/tenants/{tenantId}/classifications/{classificationId}/config")
    public ResponseEntity<TenantClassificationConfigResource> updateClassificationConfig(
            @PathVariable Long tenantId,
            @RequestParam(required = false) Long portfolioId,
            @PathVariable Long classificationId,
            @Valid @RequestBody UpdateClassificationConfigCommand command,
            @RequestHeader(value = "X-User-Id", defaultValue = "system") String userId) {
        TenantClassificationConfig config = commandService.updateClassificationConfig(
            tenantId, portfolioId, classificationId,
            command.customName(), command.customOrder(),
            command.customIcon(), command.customColor(),
            command.requiresComment(), userId
        );
        return ResponseEntity.ok(ClassificationResourceAssembler.toResourceFromConfig(config));
    }

    // ========================================
    // VERSIONING & SNAPSHOTS
    // ========================================

    @GetMapping("/tenants/{tenantId}/configuration-versions")
    public ResponseEntity<List<ConfigurationVersion>> getVersionHistory(
            @PathVariable Long tenantId,
            @RequestParam(required = false) Long portfolioId) {
        List<ConfigurationVersion> versions = queryService.getVersionHistory(tenantId, portfolioId);
        return ResponseEntity.ok(versions);
    }

    @GetMapping("/tenants/{tenantId}/configuration-versions/active")
    public ResponseEntity<ConfigurationVersion> getActiveVersion(
            @PathVariable Long tenantId,
            @RequestParam(required = false) Long portfolioId) {
        return queryService.getActiveVersion(tenantId, portfolioId)
            .map(ResponseEntity::ok)
            .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping("/tenants/{tenantId}/configuration-versions/snapshot")
    public ResponseEntity<ConfigurationVersion> createSnapshot(
            @PathVariable Long tenantId,
            @RequestParam(required = false) Long portfolioId,
            @Valid @RequestBody CreateSnapshotCommand command,
            @RequestHeader(value = "X-User-Id", defaultValue = "system") String userId) {
        ConfigurationVersion version = commandService.createSnapshot(
            tenantId, portfolioId, command.versionName(), command.description(), userId
        );
        return ResponseEntity.status(HttpStatus.CREATED).body(version);
    }

    @PostMapping("/tenants/{tenantId}/configuration-versions/{versionId}/activate")
    public ResponseEntity<Void> activateVersion(
            @PathVariable Long tenantId,
            @PathVariable Long versionId,
            @RequestHeader(value = "X-User-Id", defaultValue = "system") String userId) {
        commandService.activateVersion(versionId, userId);
        return ResponseEntity.ok().build();
    }

    // ========================================
    // AUDIT & HISTORY
    // ========================================

    @GetMapping("/tenants/{tenantId}/audit/changes")
    public ResponseEntity<Page<ClassificationConfigHistory>> getChangeHistory(
            @PathVariable Long tenantId,
            @RequestParam(required = false) Long portfolioId,
            Pageable pageable) {
        Page<ClassificationConfigHistory> history = queryService.getChangeHistory(tenantId, portfolioId, pageable);
        return ResponseEntity.ok(history);
    }

    @GetMapping("/audit/entity/{entityType}/{entityId}")
    public ResponseEntity<List<ClassificationConfigHistory>> getEntityHistory(
            @PathVariable String entityType,
            @PathVariable Long entityId) {
        ClassificationConfigHistory.EntityType type =
            ClassificationConfigHistory.EntityType.valueOf(entityType);
        List<ClassificationConfigHistory> history = queryService.getEntityHistory(type, entityId);
        return ResponseEntity.ok(history);
    }
}
